name: Docker Image CI - Build Pre-Release

on:
  push:
    branches:
      - prerelease/*
  workflow_dispatch:

permissions:
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract branch name
        shell: bash
        run: |
           echo "BR_VERSION=${GITHUB_REF##*/}" >> "$GITHUB_OUTPUT"
           echo "BR_PROJECT=$(TMP=${GITHUB_REF##*/};echo ${TMP%%_*})" >> "$GITHUB_OUTPUT"
        id: extract_branch

      - name: üëì read-yaml-file ${{ steps.extract_branch.outputs.BR_PROJECT }}/config.yaml
        uses: pietrobolcato/action-read-yaml@1.1.0
        id: read_config
        with:
          config: ${{ github.workspace }}/${{ steps.extract_branch.outputs.BR_PROJECT }}/config.yaml
          # This action reads all top-level keys, so 'name' and 'version' will be available
          # as steps.read_config.outputs.name and steps.read_config.outputs.version

      - name: Prepare Name and Version Suffix
        id: prepare_name_and_version_suffix
        shell: bash
        run: |
          CURRENT_NAME_FROM_FILE="${{ steps.read_config.outputs.name }}" # Original name from config.yaml
          CURRENT_VERSION_FROM_FILE="${{ steps.read_config.outputs.version }}" # Original version from config.yaml
          PROCESSED_NAME="$CURRENT_NAME_FROM_FILE"
          VERSION_SUFFIX_VALUE=""
          ORIGINAL_NAME_IS_PLAIN="false"

          # Check if the original name already ends with -Œ≤ or -‚ç∫.
          # If not, it's a "plain" name, and we'll append -Œ≤ for this pre-release.
          if [[ ! "$PROCESSED_NAME" =~ \-[Œ≤‚ç∫]$ ]]; then
            ORIGINAL_NAME_IS_PLAIN="true" # Original name was plain
            PROCESSED_NAME="${PROCESSED_NAME}-Œ≤"
          fi

          # Determine the expected suffix type based on the PROCESSED_NAME
          EXPECTED_SUFFIX_TYPE=""
          if [[ "$PROCESSED_NAME" =~ \-‚ç∫$ ]]; then
            EXPECTED_SUFFIX_TYPE=".alpha"
          elif [[ "$PROCESSED_NAME" =~ \-Œ≤$ ]]; then
            EXPECTED_SUFFIX_TYPE=".beta"
          fi

          # Check if the current version already has a matching suffix
          # If it does, use the existing suffix. Otherwise, append the new one.
          if [[ "$CURRENT_VERSION_FROM_FILE" =~ (${EXPECTED_SUFFIX_TYPE}[0-9]+)$ ]]; then
             # Version already has the correct suffix type, extract it
             VERSION_SUFFIX_VALUE="${BASH_REMATCH[1]}" # Capture the whole suffix including the dot and number
          else
             # Version does not have the correct suffix type or no suffix, append the new one
             VERSION_SUFFIX_VALUE="${EXPECTED_SUFFIX_TYPE}${{ github.run_number }}"
          fi

          # Strip any existing .alpha<num> or .beta<num> suffix from the current version to get the base version
          BASE_VERSION=$(echo "$CURRENT_VERSION_FROM_FILE" | sed -E 's/(\.alpha[0-9]+|\.beta[0-9]+)$//')

          # Construct the final version string by appending the determined suffix to the base version
          FINAL_VERSION_STRING="${BASE_VERSION}${VERSION_SUFFIX_VALUE}"

          echo "FINAL_NAME_TO_SET=$PROCESSED_NAME" >> "$GITHUB_OUTPUT"
          echo "FINAL_VERSION_TO_SET=$FINAL_VERSION_STRING" >> "$GITHUB_OUTPUT" # Output the complete new version string
          echo "ORIGINAL_NAME_IS_PLAIN=$ORIGINAL_NAME_IS_PLAIN" >> "$GITHUB_OUTPUT"

      - name: ‚úçüèº version ${{ steps.extract_branch.outputs.BR_PROJECT }}
        id: version_set
        uses: endaft/action-yamler@v1.1.1
        with:
          file: ./${{ steps.extract_branch.outputs.BR_PROJECT }}/config.yaml
          path: version
          set: ${{ steps.prepare_name_and_version_suffix.outputs.FINAL_VERSION_TO_SET }} # Use the fully constructed version string
          get: true
          # append: true is removed as 'set' now provides the complete desired value

      - name: ‚úçüèº BetaName ${{ steps.extract_branch.outputs.BR_PROJECT }}
        id: betaname_set
        uses: endaft/action-yamler@v1.1.1
        with:
          file: ./${{ steps.extract_branch.outputs.BR_PROJECT }}/config.yaml # File path remains the same
          path: name
          set: ${{ steps.prepare_name_and_version_suffix.outputs.FINAL_NAME_TO_SET }} # Set the prepared name
          get: true
          # append: true is removed because 'set' is now providing the complete, desired value



      - name: Publish ${{ steps.extract_branch.outputs.BR_PROJECT }} Addon ${{ steps.version_set.outputs.value_new }}
        if: false
        uses: home-assistant/builder@master
        env:
          CAS_API_KEY: ${{ secrets.CAS_API_KEY }}
        with:
          args: |
            --all \
            --target ${{ steps.extract_branch.outputs.BR_PROJECT }} \
            --docker-hub dianlight

      - name: Create pull request for Beta Repository ${{ steps.extract_branch.outputs.BR_PROJECT }}
        uses: thzois/autobot@v1.0.3
        continue-on-error: true
        env:
          GH_ACCESS_TOKEN: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          git_config_user_email: 'ffp-bot@github.com'
          git_config_user_name: 'ffp-bot'
          target_repo: 'dianlight/hassio-addons-beta'
          source_dir: '${{ steps.extract_branch.outputs.BR_PROJECT }}'
#          source_dir_copy_glob: '!(*.yaml)'
          target_dir: ''
          pr_target_repo_base_branch: 'master'
          pr_target_repo_compare_branch: 'autobot/${{ steps.extract_branch.outputs.BR_PROJECT }}'
#          pr_target_repo_compare_branch: 'autobot/${{ steps.version_set.outputs.value_new }}'
          pr_title: '[autobot] ${{ steps.extract_branch.outputs.BR_PROJECT }} ${{ steps.version_set.outputs.value_new }} Automated changes'
#          pr_description_text: '[autobot] ${{ steps.version_set.outputs.value_new }} Automated changes'
          pr_label: 'autobot'

      - name: Restoring original repository
        shell: bash
        run: |
          git config --global user.email "workflow-bot@github.com"
          git config --global user.name "Prerelease Bot"
          git restore .
          git clean -f

      - name: pull-request ${{ steps.version_set.outputs.value_old }}
        if: steps.prepare_name_and_version_suffix.outputs.ORIGINAL_NAME_IS_PLAIN == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        continue-on-error: true
        shell: bash
        run: |
          git fetch origin master ${BRANCH_NAME}
          gh pr create --head "${BRANCH_NAME}" \
          --title "Releasing ${BRANCH_NAME}" \
          --fill \
          --draft || :
