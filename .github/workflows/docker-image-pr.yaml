name: Docker Image CI - Build Release

on:
    pull_request:
        types: [ synchronize, ready_for_review ]
        branches: 
            - master
    workflow_dispatch:
        inputs:
          addon:
            description: 'Addon to build'     
            required: true
            default: 'sambanas'

permissions:
  pull-requests: write

jobs:
    build:
        if: github.event.pull_request.draft == false
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v4
          with:
                submodules: true

        - name: Login to DockerHub
          uses: docker/login-action@v3
          with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Extract branch name
          shell: bash
          run: |
              env
              #echo ${{ github.head_ref || github.ref_name }}
              if [ -z "${{ github.event.inputs.addon }}" ]; then
                if [ -z "${{ github.head_ref || github.ref_name }}" ]; then
                    export _GITHUB_REF=${GITHUB_REF}
                    echo "BR_VERSION from env ref ${_GITHUB_REF}"
                else
                    export _GITHUB_REF=${{ github.head_ref || github.ref_name }}
                    echo "BR_VERSION from github ref ${_GITHUB_REF}"
                fi
                echo "BR_VERSION=${_GITHUB_REF##*/}" | tee -a "$GITHUB_OUTPUT"
                echo "BR_PROJECT=$(TMP=${_GITHUB_REF##*/};echo ${TMP%%_*})" >> "$GITHUB_OUTPUT"
              else
                echo "BR_VERSION from event"  
                echo "BR_VERSION=${{ github.event.inputs.addon }}"  | tee -a "$GITHUB_OUTPUT"
                echo "BR_PROJECT=${{ github.event.inputs.addon }}"  | tee -a "$GITHUB_OUTPUT"
              fi
          id: extract_branch

        - name: Read config.yaml version for validation
          id: read_config_for_validation
          uses: pietrobolcato/action-read-yaml@1.1.0
          with:
            config: ./${{ steps.extract_branch.outputs.BR_PROJECT }}/config.yaml
            # This action reads all top-level keys, 'version' will be steps.read_config_for_validation.outputs.version

        - name: Validate CHANGELOG.md and config.yaml version consistency
          shell: bash
          run: |
            ADDON_DIR="${{ steps.extract_branch.outputs.BR_PROJECT }}"
            CONFIG_FILE_PATH="./$ADDON_DIR/config.yaml"
            CHANGELOG_FILE_PATH="./$ADDON_DIR/CHANGELOG.md"

            CONFIG_VERSION="${{ steps.read_config_for_validation.outputs.version }}"

            echo "Addon directory: $ADDON_DIR"
            echo "Config file path: $CONFIG_FILE_PATH"
            echo "Changelog file path: $CHANGELOG_FILE_PATH"

            if [ -z "$CONFIG_VERSION" ]; then
              echo "Error: 'version' key not found or empty in $CONFIG_FILE_PATH."
              exit 1
            fi
            echo "Version from config.yaml: $CONFIG_VERSION"

            if [ ! -f "$CHANGELOG_FILE_PATH" ]; then
              echo "Error: $CHANGELOG_FILE_PATH not found."
              exit 1
            fi

            # Get the first line starting with '## ' and extract the version.
            # Handles '## 1.2.3', '## [1.2.3]', '## v1.2.3', '## [v1.2.3]', including pre-release suffixes.
            CHANGELOG_VERSION_LINE=$(grep -m 1 '^## ' "$CHANGELOG_FILE_PATH")
            if [ -z "$CHANGELOG_VERSION_LINE" ]; then
              echo "Error: No version line found in $CHANGELOG_FILE_PATH (expected a line starting with '## ' like '## 1.2.3')."
              exit 1
            fi
            CHANGELOG_VERSION=$(echo "$CHANGELOG_VERSION_LINE" | sed -E -n 's/^##\s*\[?v?([0-9]+\.[0-9]+\.[0-9]+[^]\s]*)\]?.*/\1/p')

            if [ -z "$CHANGELOG_VERSION" ]; then
              echo "Error: Could not extract version from CHANGELOG.md line: $CHANGELOG_VERSION_LINE"
              echo "Expected format like '## 1.2.3' or '## [v1.2.3]' or '## 1.2.3-beta1'."
              exit 1
            fi
            echo "Latest version from $CHANGELOG_FILE_PATH: $CHANGELOG_VERSION"

            if [ "$CONFIG_VERSION" == "$CHANGELOG_VERSION" ]; then
              echo "Versions match: config.yaml ($CONFIG_VERSION) and CHANGELOG.md ($CHANGELOG_VERSION)."
            else
              echo "Error: Version mismatch!"
              echo "config.yaml version: $CONFIG_VERSION"
              echo "CHANGELOG.md version: $CHANGELOG_VERSION"
              exit 1
            fi

        - name: Publish ${{ steps.extract_branch.outputs.BR_VERSION }} Addon
          uses: home-assistant/builder@master
          env:
                CAS_API_KEY: ${{ secrets.CAS_API_KEY }}
          with:
                args: |
                    --all \
                    --target ${{ steps.extract_branch.outputs.BR_PROJECT }} \
                    --docker-hub dianlight \
                    --cosign
