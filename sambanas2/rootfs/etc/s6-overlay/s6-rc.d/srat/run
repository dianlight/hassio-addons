#!/command/with-contenv bashio
# shellcheck shell=bash
# vim: ft=bash
# ==============================================================================
# Start srat service
# ==============================================================================

PRERELEASE_TAG=$(curl -s https://api.github.com/repos/dianlight/srat/releases | jq -r 'map(select(.prerelease)) | .[0].tag_name')
RELEASE_TAG=$(curl -s https://api.github.com/repos/dianlight/srat/releases | jq -r 'map(select(.release)) | .[0].tag_name')
tmp_file=$(mktemp -u -t srat.XXXXXX)

if bashio::config.has_value 'update_srat_onstart'; then
  bashio::log.info "Update on start: $(bashio::config 'update_srat_onstart')"
  if bashio::config.equals 'update_srat_onstart' 'release'; then
    bashio::log.info "Updating to ${RELEASE_TAG}"
    bashio::log.debug "Downloading from https://github.com/dianlight/srat/releases/download/${RELEASE_TAG}/srat_$(arch)"  
    if ! curl --silent --fail -L "https://github.com/dianlight/srat/releases/download/${RELEASE_TAG}/srat_$(arch)" >$tmp_file; then
      bashio::log.error "Failed to download srat release from github"
    fi
    #gh -R dianlight/srat release download $RELEASE_TAG -p "srat_$(arch)" -O /usr/local/bin/srat --clobber
  elif bashio::config.equals 'update_srat_onstart' 'prerelease'; then
    bashio::log.info "Updating to ${PRERELEASE_TAG}"
    bashio::log.debug "Downloading from https://github.com/dianlight/srat/releases/download/${PRERELEASE_TAG}/srat_$(arch)"  
    if ! curl --silent --fail -L "https://github.com/dianlight/srat/releases/download/${PRERELEASE_TAG}/srat_$(arch)" >$tmp_file; then
      bashio::log.error "Failed to download srat prerelease from github"
    fi
    #gh -R dianlight/srat release download $PRERELEASE_TAG -p "srat_$(arch)" -O /usr/local/bin/srat --clobber
  elif bashio::config.equals 'update_srat_onstart' 'localdev'; then    
    bashio::log.info "Updating to from local_addon_registry.home repository"
    bashio::log.debug "Downloading from local_addon_registry.home repository"  
    if ! curl --silent --fail -L "http://local_addon_registry.home:8090/srat_$(arch)" >$tmp_file; then
      bashio::log.error "Failed to download srat from local_addon_registry.home"
      if [ -f /config/srat_$(arch) ]; then
        bashio::log.info "Using existing srat from /config/srat_$(arch)"
        tmp_file=/config/srat_$(arch)
      else
        bashio::log.error "Failed to download srat from local_addon_registry.home and no existing srat_$(arch) found"
      fi
    fi
  fi

  if [ -f $tmp_file ]; then
    bashio::log.info "Installing srat to /usr/local/bin/srat"
    cp $tmp_file /usr/local/bin/srat
    chmod +x /usr/local/bin/srat
  else
    bashio::log.error "Failed to download srat from github"
  fi
fi

exec /usr/local/bin/srat \
  -port $(bashio::addon.ingress_port) \
  $(bashio::var.has_value "$(bashio::addon.port 3000)" || echo " -addon") \
  -conf /config/bootconfig.json \
  -db /config/config.db3 \
  -out /etc/samba/smb.conf \
  -docker-interface "$(bashio::network 'network.info.docker.inerface' '.docker.interface')" \
  -docker-network "$(bashio::network 'network.info.docker.network' '.docker.address')" \
  $(bashio::config.equals 'update_srat_onstart' 'localdev' && echo " -update-file-path /config/srat_$(arch)") \
  -loglevel $(bashio::config 'loglevel' 'info') \
  -ip-address $(bashio::addon.ip_address)
